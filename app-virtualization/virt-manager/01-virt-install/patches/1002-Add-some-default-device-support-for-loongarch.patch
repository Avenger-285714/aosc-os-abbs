From 8c3eb92176fa883c6cfe5ebdf5a855ce98e1d716 Mon Sep 17 00:00:00 2001
From: Xianglai Li <lixianglai@loongson.cn>
Date: Wed, 13 Dec 2023 04:43:51 -0500
Subject: [PATCH 2/3] Add some default device support for loongarch

Add adaptations for loongarch with the following features:
Default video Support
UEFI prefer
Usb tablet and usb keyboard
rng and memballoon
sound device
Usb controller

Signed-off-by: Xianglai Li <lixianglai@loongson.cn>
---
 virtinst/devices/video.py |  2 ++
 virtinst/guest.py         | 24 +++++++++++++++++-------
 2 files changed, 19 insertions(+), 7 deletions(-)

diff --git a/virtinst/devices/video.py b/virtinst/devices/video.py
index 70067a72..97adf7d3 100644
--- a/virtinst/devices/video.py
+++ b/virtinst/devices/video.py
@@ -31,6 +31,8 @@ class DeviceVideo(Device):
             return None
         if guest.os.is_pseries():
             return "vga"
+        if guest.os.is_loongarch64():
+            return "virtio"
         if guest.os.is_arm_machvirt():
             # For all cases here the hv and guest are new enough for virtio
             return "virtio"
diff --git a/virtinst/guest.py b/virtinst/guest.py
index e6636022..e3a10939 100644
--- a/virtinst/guest.py
+++ b/virtinst/guest.py
@@ -352,7 +352,8 @@ class Guest(XMLBuilder):
         if (self.os.is_arm_machvirt() or
             self.os.is_riscv_virt() or
             self.os.is_s390x() or
-            self.os.is_pseries()):
+            self.os.is_pseries() or
+            self.os.is_loongarch64()):
             return True
 
         if not os_support:
@@ -541,7 +542,7 @@ class Guest(XMLBuilder):
             # and doesn't break QEMU internal snapshots
             prefer_efi = self.osinfo.requires_firmware_efi(self.os.arch)
         else:
-            prefer_efi = self.os.is_arm_machvirt() or self.conn.is_bhyve()
+            prefer_efi = self.os.is_arm_machvirt() or self.conn.is_bhyve() or self.os.is_loongarch64()
 
         log.debug("Prefer EFI => %s", prefer_efi)
         return prefer_efi
@@ -902,7 +903,8 @@ class Guest(XMLBuilder):
             usb_tablet = True
         if (self.os.is_arm_machvirt() or
             self.os.is_riscv_virt() or
-            self.os.is_pseries()):
+            self.os.is_pseries() or
+            self.os.is_loongarch64()):
             usb_tablet = True
             usb_keyboard = True
 
@@ -984,7 +986,10 @@ class Guest(XMLBuilder):
             # For pseries, we always assume OS supports usb3
             if qemu_usb3:
                 usb3 = True
-
+        elif self.os.is_loongarch64():
+            # For loongarch64, we always assume OS supports usb3
+            if qemu_usb3:
+                usb3 = True
 
         if usb2:
             for dev in DeviceController.get_usb2_controllers(self.conn):
@@ -1016,7 +1021,8 @@ class Guest(XMLBuilder):
         if self.os.is_container() and not self.conn.is_vz():
             return
         if (not self.os.is_x86() and
-            not self.os.is_pseries()):
+            not self.os.is_pseries() and
+            not self.os.is_loongarch64()):
             return
         self.add_device(DeviceGraphics(self.conn))
 
@@ -1029,7 +1035,8 @@ class Guest(XMLBuilder):
                 self.os.is_arm_machvirt() or
                 self.os.is_riscv_virt() or
                 self.os.is_s390x() or
-                self.os.is_pseries()):
+                self.os.is_pseries() or
+                self.os.is_loongarch64()):
             return
 
         if (self.conn.is_qemu() and
@@ -1074,7 +1081,8 @@ class Guest(XMLBuilder):
                 self.os.is_arm_machvirt() or
                 self.os.is_riscv_virt() or
                 self.os.is_s390x() or
-                self.os.is_pseries()):
+                self.os.is_pseries() or
+                self.os.is_loongarch64()):
             return
 
         if self.osinfo.supports_virtioballoon(self._extra_drivers):
@@ -1101,6 +1109,8 @@ class Guest(XMLBuilder):
             return True
         if self.os.is_riscv_virt():
             return True
+        if self.os.is_loongarch64():
+            return True
         return False
 
     def _add_q35_pcie_controllers(self):
-- 
2.44.0

