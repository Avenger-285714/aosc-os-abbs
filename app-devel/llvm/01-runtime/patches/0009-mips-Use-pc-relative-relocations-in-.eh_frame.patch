From 342ae049673a5e72a15899f349d55a02e38840b8 Mon Sep 17 00:00:00 2001
From: Simon Atanasyan <simon@atanasyan.com>
Date: Tue, 2 Jan 2024 22:29:22 -0700
Subject: [PATCH 09/27] [mips] Use pc-relative relocations in .eh_frame

Co-Authored-By: liushuyu <liushuyu011@gmail.com>
---
 clang/include/clang/Basic/CodeGenOptions.def  |  3 ++
 clang/include/clang/Driver/Options.td         |  3 ++
 clang/lib/CodeGen/BackendUtil.cpp             |  1 +
 clang/lib/Driver/ToolChains/Clang.cpp         | 10 +++++
 clang/test/Driver/mips-features.c             | 12 ++++++
 clang/tools/driver/cc1as_main.cpp             |  3 ++
 lld/test/ELF/mips-eh_frame-pic.s              | 16 ++++----
 llvm/include/llvm/MC/MCContext.h              |  1 +
 llvm/include/llvm/MC/MCTargetOptions.h        |  3 ++
 .../llvm/MC/MCTargetOptionsCommandFlags.h     |  2 +
 .../CodeGen/TargetLoweringObjectFileImpl.cpp  |  8 +---
 llvm/lib/MC/MCContext.cpp                     |  6 +++
 llvm/lib/MC/MCObjectFileInfo.cpp              | 13 +++---
 llvm/lib/MC/MCTargetOptions.cpp               |  3 +-
 llvm/lib/MC/MCTargetOptionsCommandFlags.cpp   |  9 +++++
 llvm/test/CodeGen/Mips/ehframe-indirect.ll    | 40 ++++++++++++-------
 llvm/test/DebugInfo/Mips/eh_frame.ll          |  4 +-
 llvm/test/MC/Mips/eh-frame.s                  | 26 +++++++-----
 18 files changed, 114 insertions(+), 49 deletions(-)

diff --git a/clang/include/clang/Basic/CodeGenOptions.def b/clang/include/clang/Basic/CodeGenOptions.def
index d492b8681c5d..72fe77a4ac83 100644
--- a/clang/include/clang/Basic/CodeGenOptions.def
+++ b/clang/include/clang/Basic/CodeGenOptions.def
@@ -118,6 +118,9 @@ CODEGENOPT(ForceDwarfFrameSection , 1, 0) ///< Set when -fforce-dwarf-frame is
 ///< Set when -femit-compact-unwind-non-canonical is enabled.
 CODEGENOPT(EmitCompactUnwindNonCanonical, 1, 0)
 
+///< Set when -mips-pc64-rel is enabled.
+CODEGENOPT(MipsPC64Relocation, 1, 0)
+
 ///< Set when -femit-dwarf-unwind is passed.
 ENUM_CODEGENOPT(EmitDwarfUnwind, llvm::EmitDwarfUnwindType, 2,
                 llvm::EmitDwarfUnwindType::Default)
diff --git a/clang/include/clang/Driver/Options.td b/clang/include/clang/Driver/Options.td
index 37e8c56b2d29..632a61418e94 100644
--- a/clang/include/clang/Driver/Options.td
+++ b/clang/include/clang/Driver/Options.td
@@ -4351,6 +4351,9 @@ def mno_relax_pic_calls : Flag<["-"], "mno-relax-pic-calls">,
   Group<m_mips_Features_Group>,
   HelpText<"Do not produce relaxation hints for linkers to try optimizing PIC "
            "call sequences into direct calls (MIPS only)">, Flags<[HelpHidden]>;
+defm mips_pc64_rel : BoolOption<"", "mips-pc64-rel",
+CodeGenOpts<"MipsPC64Relocation">, DefaultTrue,
+PosFlag<SetTrue, [CC1Option, CC1AsOption], "Use MIPS 64-bit PC-relative relocations">, NegFlag<SetFalse>>;
 def mglibc : Flag<["-"], "mglibc">, Group<m_libc_Group>, Flags<[HelpHidden]>;
 def muclibc : Flag<["-"], "muclibc">, Group<m_libc_Group>, Flags<[HelpHidden]>;
 def module_file_info : Flag<["-"], "module-file-info">, Flags<[NoXarchOption,CC1Option]>, Group<Action_Group>,
diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
index 483f3e787a78..906756627270 100644
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -486,6 +486,7 @@ static bool initTargetOptions(DiagnosticsEngine &Diags,
   Options.MCOptions.CommandLineArgs = CodeGenOpts.CommandLineArgs;
   Options.MCOptions.AsSecureLogFile = CodeGenOpts.AsSecureLogFile;
   Options.MisExpect = CodeGenOpts.MisExpect;
+  Options.MCOptions.MipsPC64Relocation = CodeGenOpts.MipsPC64Relocation;
 
   return true;
 }
diff --git a/clang/lib/Driver/ToolChains/Clang.cpp b/clang/lib/Driver/ToolChains/Clang.cpp
index 37a07b8f224d..59fa245fb621 100644
--- a/clang/lib/Driver/ToolChains/Clang.cpp
+++ b/clang/lib/Driver/ToolChains/Clang.cpp
@@ -2013,6 +2013,16 @@ void Clang::AddMIPSTargetArgs(const ArgList &Args,
       CmdArgs.push_back("-mips-jalr-reloc=0");
     }
   }
+
+  if (Arg *A = Args.getLastArg(options::OPT_mips_pc64_rel,
+                               options::OPT_no_mips_pc64_rel)) {
+    CmdArgs.push_back("-mllvm");
+    if (A->getOption().matches(options::OPT_mips_pc64_rel))
+      CmdArgs.push_back("-mips-pc64-rel=true");
+    else
+      CmdArgs.push_back("-mips-pc64-rel=false");
+    A->claim();
+  }
 }
 
 void Clang::AddPPCTargetArgs(const ArgList &Args,
diff --git a/clang/test/Driver/mips-features.c b/clang/test/Driver/mips-features.c
index 5ae566774959..58b5368d4a93 100644
--- a/clang/test/Driver/mips-features.c
+++ b/clang/test/Driver/mips-features.c
@@ -456,3 +456,15 @@
 // RUN:     -mrelax-pic-calls -mno-relax-pic-calls 2>&1 \
 // RUN:   | FileCheck --check-prefix=CHECK-NO-RELAX-PIC-CALLS %s
 // CHECK-NO-RELAX-PIC-CALLS: "-mllvm" "-mips-jalr-reloc=0"
+//
+// -mips-pc64-rel
+// RUN: %clang -target mips-unknown-linux-gnu -### -c %s \
+// RUN:     -no-mips-pc64-rel -mips-pc64-rel 2>&1 \
+// RUN:   | FileCheck --check-prefix=CHECK-PC64-REL %s
+// CHECK-PC64-REL-NOT: "-mllvm" "-mips-pc64-rel=false"
+//
+// -no-mips-pc64-rel
+// RUN: %clang -target mips-unknown-linux-gnu -### -c %s \
+// RUN:     -mips-pc64-rel -no-mips-pc64-rel 2>&1 \
+// RUN:   | FileCheck --check-prefix=CHECK-NO-PC64-REL %s
+// CHECK-NO-PC64-REL: "-mllvm" "-mips-pc64-rel=false"
diff --git a/clang/tools/driver/cc1as_main.cpp b/clang/tools/driver/cc1as_main.cpp
index 3c5926073f02..1668f81a8168 100644
--- a/clang/tools/driver/cc1as_main.cpp
+++ b/clang/tools/driver/cc1as_main.cpp
@@ -147,6 +147,8 @@ struct AssemblerInvocation {
   // Note: maybe overriden by other constraints.
   unsigned EmitCompactUnwindNonCanonical : 1;
 
+  unsigned MipsPC64Relocation : 1;
+
   /// The name of the relocation model to use.
   std::string RelocationModel;
 
@@ -411,6 +413,7 @@ static bool ExecuteAssemblerImpl(AssemblerInvocation &Opts,
   MCTargetOptions MCOptions;
   MCOptions.EmitDwarfUnwind = Opts.EmitDwarfUnwind;
   MCOptions.EmitCompactUnwindNonCanonical = Opts.EmitCompactUnwindNonCanonical;
+  MCOptions.MipsPC64Relocation = Opts.MipsPC64Relocation;
   MCOptions.AsSecureLogFile = Opts.AsSecureLogFile;
 
   std::unique_ptr<MCAsmInfo> MAI(
diff --git a/lld/test/ELF/mips-eh_frame-pic.s b/lld/test/ELF/mips-eh_frame-pic.s
index a84c36b0e5ec..8f005de95abb 100644
--- a/lld/test/ELF/mips-eh_frame-pic.s
+++ b/lld/test/ELF/mips-eh_frame-pic.s
@@ -12,11 +12,11 @@
 ## relative addressing.
 # NOPIC-ERR: ld.lld: error: relocation R_MIPS_64 cannot be used against local symbol
 
-## For -fPIC, .eh_frame should contain DW_EH_PE_pcrel | DW_EH_PE_sdata4 values:
+## For -fPIC, .eh_frame should contain DW_EH_PE_pcrel | DW_EH_PE_sdata8 values:
 # RUN: llvm-mc -filetype=obj -triple=mips64-unknown-linux --position-independent %s -o %t-pic.o
 # RUN: llvm-readobj -r %t-pic.o | FileCheck %s --check-prefixes=RELOCS,PIC64-RELOCS
 # RUN: ld.lld -shared %t-pic.o -o %t-pic.so
-# RUN: llvm-dwarfdump --eh-frame %t-pic.so | FileCheck %s --check-prefix=PIC-EH-FRAME
+# RUN: llvm-dwarfdump --eh-frame %t-pic.so | FileCheck %s --check-prefix=PIC64-EH-FRAME
 
 ## Also check MIPS32:
 # RUN: llvm-mc -filetype=obj -triple=mips-unknown-linux %s -o %t-nopic32.o
@@ -31,12 +31,12 @@
 # RUN: llvm-mc -filetype=obj -triple=mips-unknown-linux --position-independent %s -o %t-pic32.o
 # RUN: llvm-readobj -r %t-pic32.o | FileCheck %s --check-prefixes=RELOCS,PIC32-RELOCS
 # RUN: ld.lld -shared %t-pic32.o -o %t-pic32.so
-# RUN: llvm-dwarfdump --eh-frame %t-pic32.so | FileCheck %s --check-prefix=PIC-EH-FRAME
+# RUN: llvm-dwarfdump --eh-frame %t-pic32.so | FileCheck %s --check-prefix=PIC32-EH-FRAME
 
 # RELOCS:            .rel{{a?}}.eh_frame {
 # ABS32-RELOCS-NEXT:   0x1C R_MIPS_32 .text
 # ABS64-RELOCS-NEXT:   0x1C R_MIPS_64/R_MIPS_NONE/R_MIPS_NONE .text
-# PIC64-RELOCS-NEXT:   0x1C R_MIPS_PC32/R_MIPS_NONE/R_MIPS_NONE <null>
+# PIC64-RELOCS-NEXT:   0x1C R_MIPS_PC32/R_MIPS_64/R_MIPS_NONE <null>
 # PIC32-RELOCS-NEXT:   0x1C R_MIPS_PC32 <null>
 # RELOCS-NEXT:       }
 
@@ -44,10 +44,10 @@
 ##                                   ^^ fde pointer encoding: DW_EH_PE_sdata8
 # ABS32-EH-FRAME: Augmentation data: 0B
 ##                                   ^^ fde pointer encoding: DW_EH_PE_sdata4
-# PIC-EH-FRAME: Augmentation data: 1B
-##                                 ^^ fde pointer encoding: DW_EH_PE_pcrel | DW_EH_PE_sdata4
-## Note: ld.bfd converts the R_MIPS_64 relocs to DW_EH_PE_pcrel | DW_EH_PE_sdata8
-## for N64 ABI (and DW_EH_PE_pcrel | DW_EH_PE_sdata4 for MIPS32)
+# PIC32-EH-FRAME: Augmentation data: 1B
+##                                   ^^ fde pointer encoding: DW_EH_PE_pcrel | DW_EH_PE_sdata4
+# PIC64-EH-FRAME: Augmentation data: 1C
+##                                   ^^ fde pointer encoding: DW_EH_PE_pcrel | DW_EH_PE_sdata8
 
 .ent func
 .global func
diff --git a/llvm/include/llvm/MC/MCContext.h b/llvm/include/llvm/MC/MCContext.h
index 68d6f3e59d2d..d6d6ec9badc1 100644
--- a/llvm/include/llvm/MC/MCContext.h
+++ b/llvm/include/llvm/MC/MCContext.h
@@ -791,6 +791,7 @@ public:
   unsigned getGenDwarfFileNumber() { return GenDwarfFileNumber; }
   EmitDwarfUnwindType emitDwarfUnwindInfo() const;
   bool emitCompactUnwindNonCanonical() const;
+  bool getMipsPC64Relocation() const;
 
   void setGenDwarfFileNumber(unsigned FileNumber) {
     GenDwarfFileNumber = FileNumber;
diff --git a/llvm/include/llvm/MC/MCTargetOptions.h b/llvm/include/llvm/MC/MCTargetOptions.h
index 9fc1e07d085e..b14ba62227ab 100644
--- a/llvm/include/llvm/MC/MCTargetOptions.h
+++ b/llvm/include/llvm/MC/MCTargetOptions.h
@@ -89,6 +89,9 @@ public:
   // functions on Darwins.
   bool EmitCompactUnwindNonCanonical : 1;
 
+  // Whether to use MIPS 64-bit PC-relative relocations
+  bool MipsPC64Relocation : 1;
+
   MCTargetOptions();
 
   /// getABIName - If this returns a non-empty string this represents the
diff --git a/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.h b/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.h
index 7f6ee6c8be22..c961628aea96 100644
--- a/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.h
+++ b/llvm/include/llvm/MC/MCTargetOptionsCommandFlags.h
@@ -51,6 +51,8 @@ std::string getABIName();
 
 std::string getAsSecureLogFile();
 
+bool getMipsPC64Relocation();
+
 /// Create this object with static storage to register mc-related command
 /// line options.
 struct RegisterMCTargetOptionsFlags {
diff --git a/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp b/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
index 4ffffd85ee53..e8179de43511 100644
--- a/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
+++ b/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp
@@ -212,13 +212,9 @@ void TargetLoweringObjectFileELF::Initialize(MCContext &Ctx,
     //        identify N64 from just a triple.
     TTypeEncoding = dwarf::DW_EH_PE_indirect | dwarf::DW_EH_PE_pcrel |
                     dwarf::DW_EH_PE_sdata4;
-    // We don't support PC-relative LSDA references in GAS so we use the default
-    // DW_EH_PE_absptr for those.
 
-    // FreeBSD must be explicit about the data size and using pcrel since it's
-    // assembler/linker won't do the automatic conversion that the Linux tools
-    // do.
-    if (TgtM.getTargetTriple().isOSFreeBSD()) {
+    if (isPositionIndependent() &&
+        (TgtM.Options.MCOptions.MipsPC64Relocation || TgtM.getTargetTriple().isMIPS32())) {
       PersonalityEncoding |= dwarf::DW_EH_PE_pcrel | dwarf::DW_EH_PE_sdata4;
       LSDAEncoding = dwarf::DW_EH_PE_pcrel | dwarf::DW_EH_PE_sdata4;
     }
diff --git a/llvm/lib/MC/MCContext.cpp b/llvm/lib/MC/MCContext.cpp
index c443f46e0242..0f6d5f9272bf 100644
--- a/llvm/lib/MC/MCContext.cpp
+++ b/llvm/lib/MC/MCContext.cpp
@@ -932,6 +932,12 @@ bool MCContext::emitCompactUnwindNonCanonical() const {
   return false;
 }
 
+bool MCContext::getMipsPC64Relocation() const {
+  if (TargetOptions)
+    return TargetOptions->MipsPC64Relocation;
+  return false;
+}
+
 void MCContext::setGenDwarfRootFile(StringRef InputFileName, StringRef Buffer) {
   // MCDwarf needs the root file as well as the compilation directory.
   // If we find a '.file 0' directive that will supersede these values.
diff --git a/llvm/lib/MC/MCObjectFileInfo.cpp b/llvm/lib/MC/MCObjectFileInfo.cpp
index 0b5109e41e71..97e2e03bc559 100644
--- a/llvm/lib/MC/MCObjectFileInfo.cpp
+++ b/llvm/lib/MC/MCObjectFileInfo.cpp
@@ -337,14 +337,11 @@ void MCObjectFileInfo::initELFMCObjectFileInfo(const Triple &T, bool Large) {
   case Triple::mipsel:
   case Triple::mips64:
   case Triple::mips64el:
-    // We cannot use DW_EH_PE_sdata8 for the large PositionIndependent case
-    // since there is no R_MIPS_PC64 relocation (only a 32-bit version).
-    if (PositionIndependent && !Large)
-      FDECFIEncoding = dwarf::DW_EH_PE_pcrel | dwarf::DW_EH_PE_sdata4;
-    else
-      FDECFIEncoding = Ctx->getAsmInfo()->getCodePointerSize() == 4
-                           ? dwarf::DW_EH_PE_sdata4
-                           : dwarf::DW_EH_PE_sdata8;
+    FDECFIEncoding = Ctx->getAsmInfo()->getCodePointerSize() == 4
+                         ? dwarf::DW_EH_PE_sdata4
+                         : dwarf::DW_EH_PE_sdata8;
+    if (PositionIndependent && (Ctx->getMipsPC64Relocation() || T.isMIPS32()))
+      FDECFIEncoding |= dwarf::DW_EH_PE_pcrel;
     break;
   case Triple::ppc64:
   case Triple::ppc64le:
diff --git a/llvm/lib/MC/MCTargetOptions.cpp b/llvm/lib/MC/MCTargetOptions.cpp
index 8fea8c7715bd..cb7f242e3d54 100644
--- a/llvm/lib/MC/MCTargetOptions.cpp
+++ b/llvm/lib/MC/MCTargetOptions.cpp
@@ -19,7 +19,8 @@ MCTargetOptions::MCTargetOptions()
       PreserveAsmComments(true), Dwarf64(false),
       EmitDwarfUnwind(EmitDwarfUnwindType::Default),
       MCUseDwarfDirectory(DefaultDwarfDirectory),
-      EmitCompactUnwindNonCanonical(false) {}
+      EmitCompactUnwindNonCanonical(false),
+      MipsPC64Relocation(true) {}
 
 StringRef MCTargetOptions::getABIName() const {
   return ABIName;
diff --git a/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp b/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp
index 8a4923e4792f..76e719c5110d 100644
--- a/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp
+++ b/llvm/lib/MC/MCTargetOptionsCommandFlags.cpp
@@ -47,6 +47,7 @@ MCOPT(bool, NoDeprecatedWarn)
 MCOPT(bool, NoTypeCheck)
 MCOPT(std::string, ABIName)
 MCOPT(std::string, AsSecureLogFile)
+MCOPT(bool, MipsPC64Relocation)
 
 llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags() {
 #define MCBINDOPT(NAME)                                                        \
@@ -128,6 +129,13 @@ llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags() {
       "as-secure-log-file", cl::desc("As secure log file name"), cl::Hidden);
   MCBINDOPT(AsSecureLogFile);
 
+  static cl::opt<bool> MipsPC64Relocation(
+      "mips-pc64-rel", cl::Hidden,
+      cl::desc(
+          "Whether to MIPS 64-bit PC-relative relocations"),
+      cl::init(true));
+  MCBINDOPT(MipsPC64Relocation);
+
 #undef MCBINDOPT
 }
 
@@ -146,6 +154,7 @@ MCTargetOptions llvm::mc::InitMCTargetOptionsFromFlags() {
   Options.EmitDwarfUnwind = getEmitDwarfUnwind();
   Options.EmitCompactUnwindNonCanonical = getEmitCompactUnwindNonCanonical();
   Options.AsSecureLogFile = getAsSecureLogFile();
+  Options.MipsPC64Relocation = getMipsPC64Relocation();
 
   return Options;
 }
diff --git a/llvm/test/CodeGen/Mips/ehframe-indirect.ll b/llvm/test/CodeGen/Mips/ehframe-indirect.ll
index b3f4b48329d7..cd3a33286934 100644
--- a/llvm/test/CodeGen/Mips/ehframe-indirect.ll
+++ b/llvm/test/CodeGen/Mips/ehframe-indirect.ll
@@ -1,30 +1,40 @@
 ; RUN: llc -mtriple=mipsel-linux-gnu < %s -asm-verbose -relocation-model=pic | \
 ; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-O32,O32 %s
+; RUN: llc -mtriple=mipsel-linux-android < %s -asm-verbose -relocation-model=pic | \
+; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-O32,O32 %s
 ; RUN: llc -mtriple=mips64el-linux-gnu -target-abi=n32 < %s -asm-verbose -relocation-model=pic | \
-; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-NEW,N32 %s
+; RUN:     FileCheck -check-prefixes=ALL,N32,N32REL %s
 ; RUN: llc -mtriple=mips64el-linux-gnu < %s -asm-verbose -relocation-model=pic | \
-; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-NEW,N64 %s
+; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-NEW,N64,N64REL %s
+; RUN: llc -mtriple=mips64el-linux-android < %s -asm-verbose -relocation-model=pic | \
+; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-NEW,N64,N64REL %s
 ; RUN: llc -mtriple=mips64el-linux-gnu < %s -asm-verbose -relocation-model=pic | \
-; RUN:     FileCheck -check-prefixes=ALL,LINUX,LINUX-NEW,N64 %s
-; RUN: llc -mtriple=mips-unknown-freebsd11.0 < %s -asm-verbose -relocation-model=pic | \
-; RUN:     FileCheck -check-prefixes=ALL,FREEBSD,FREEBSD-O32,O32 %s
+; RUN:     FileCheck -check-prefixes=ALL,N64,N64REL %s
 ; RUN: llc -mtriple=mips64-unknown-freebsd11.0 < %s -asm-verbose -relocation-model=pic | \
-; RUN:     FileCheck -check-prefixes=ALL,FREEBSD,FREEBSD-NEW,N64 %s
+; RUN:     FileCheck -check-prefixes=ALL,N64,N64REL %s
+
+; RUN: llc -mtriple=mips64-linux-gnu -target-abi=n32 -mips-pc64-rel=false \
+; RUN:     -asm-verbose -relocation-model=pic < %s | \
+; RUN:     FileCheck -check-prefixes=ALL,N32,N32ABS %s
+; RUN: llc -mtriple=mips64-linux-gnu -mips-pc64-rel=false \
+; RUN:     -asm-verbose -relocation-model=pic < %s | \
+; RUN:     FileCheck -check-prefixes=ALL,N64,N64ABS %s
 
 @_ZTISt9exception = external constant ptr
 
 define i32 @main() personality ptr @__gxx_personality_v0 {
 ; ALL: .cfi_startproc
 
-; Linux must rely on the assembler/linker converting the encodings.
-; LINUX: .cfi_personality 128, DW.ref.__gxx_personality_v0
-; LINUX-O32: .cfi_lsda 0, $exception0
-; LINUX-NEW: .cfi_lsda 0, .Lexception0
-
-; FreeBSD can (and must) be more direct about the encodings it wants.
-; FREEBSD: .cfi_personality 155, DW.ref.__gxx_personality_v0
-; FREEBSD-O32: .cfi_lsda 27, $exception0
-; FREEBSD-NEW: .cfi_lsda 27, .Lexception0
+; O32: .cfi_personality 155, DW.ref.__gxx_personality_v0
+; O32: .cfi_lsda 27, $exception0
+; N32REL: .cfi_personality 155, DW.ref.__gxx_personality_v0
+; N32REL: .cfi_lsda 27, .Lexception0
+; N32ABS: .cfi_personality 128, DW.ref.__gxx_personality_v0
+; N32ABS: .cfi_lsda 0, .Lexception0
+; N64REL: .cfi_personality 155, DW.ref.__gxx_personality_v0
+; N64REL: .cfi_lsda 27, .Lexception0
+; N64ABS: .cfi_personality 128, DW.ref.__gxx_personality_v0
+; N64ABS: .cfi_lsda 0, .Lexception0
 
 entry:
   invoke void @foo() to label %cont unwind label %lpad
diff --git a/llvm/test/DebugInfo/Mips/eh_frame.ll b/llvm/test/DebugInfo/Mips/eh_frame.ll
index 506e5b87892b..77cde98e5317 100644
--- a/llvm/test/DebugInfo/Mips/eh_frame.ll
+++ b/llvm/test/DebugInfo/Mips/eh_frame.ll
@@ -17,9 +17,9 @@
 ; STATIC-DAG: R_MIPS_32 00000000 .gcc_except_table
 
 ; PIC-LABEL: Relocation section '.rel.eh_frame'
-; PIC-DAG: R_MIPS_32   00000000 DW.ref.__gxx_personality_v0
+; PIC-DAG: R_MIPS_PC32 00000000 DW.ref.__gxx_personality_v0
+; PIC-DAG: R_MIPS_PC32
 ; PIC-DAG: R_MIPS_PC32
-; PIC-DAG: R_MIPS_32   00000000 .gcc_except_table
 
 ; CHECK-READELF: DW.ref.__gxx_personality_v0
 ; CHECK-READELF-STATIC-NEXT: R_MIPS_32 00000000 .text
diff --git a/llvm/test/MC/Mips/eh-frame.s b/llvm/test/MC/Mips/eh-frame.s
index fd145317bf4d..1b88f7740e9a 100644
--- a/llvm/test/MC/Mips/eh-frame.s
+++ b/llvm/test/MC/Mips/eh-frame.s
@@ -33,14 +33,18 @@
 // RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,PIC64 %s
 // RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_PIC %s
 
-/// However using the large code model forces R_MIPS_64 since there is no R_MIPS_PC64 relocation:
 // RUN: llvm-mc -filetype=obj %s -o %t.o -triple mips64-unknown-linux-gnu --position-independent --large-code-model
-// RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,ABS64 %s
-// RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_ABS %s
+// RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,PIC64 %s
+// RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_PIC %s
 
 // RUN: llvm-mc -filetype=obj %s -o %t.o -triple mips64el-unknown-linux-gnu --position-independent  --large-code-model
-// RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,ABS64 %s
-// RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_ABS %s
+// RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,PIC64 %s
+// RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_PIC %s
+
+// RUN: llvm-mc -filetype=obj %s -o %t.o -triple mips64-unknown-linux-gnu \
+// RUN:         --position-independent --large-code-model -mips-pc64-rel=false
+// RUN: llvm-readobj -r %t.o | FileCheck --check-prefixes=RELOCS,OLD64 %s
+// RUN: llvm-dwarfdump -eh-frame %t.o | FileCheck --check-prefixes=DWARF64,DWARF64_OLD %s
 
 func:
 	.cfi_startproc
@@ -51,7 +55,8 @@ func:
 // ABS32-NEXT:      R_MIPS_32
 // ABS64-NEXT:      R_MIPS_64/R_MIPS_NONE/R_MIPS_NONE
 // PIC32-NEXT:      R_MIPS_PC32
-// PIC64-NEXT:      R_MIPS_PC32/R_MIPS_NONE/R_MIPS_NONE
+// PIC64-NEXT:      R_MIPS_PC32/R_MIPS_64/R_MIPS_NONE
+// OLD64-NEXT:      R_MIPS_64/R_MIPS_NONE/R_MIPS_NONE
 // RELOCS-NEXT:   }
 
 // DWARF32: 00000000 00000010 00000000 CIE
@@ -87,14 +92,17 @@ func:
 // DWARF64-NEXT:     Return address column: 31
 // DWARF64_ABS-NEXT: Augmentation data: 0C
 //                                      ^^ fde pointer encoding: DW_EH_PE_sdata8
-// DWARF64_PIC:      Augmentation data: 1B
-//                                      ^^ fde pointer encoding: DW_EH_PE_pcrel | DW_EH_PE_sdata4
+// DWARF64_PIC:      Augmentation data: 1C
+//                                      ^^ fde pointer encoding: DW_EH_PE_pcrel | DW_EH_PE_sdata8
+// DWARF64_OLD:      Augmentation data: 0C
+//                                      ^^ fde pointer encoding: DW_EH_PE_sdata8
 // DWARF64-EMPTY:
 // DWARF64-NEXT:     DW_CFA_def_cfa_register: SP_64
 // DWARF64_PIC-NEXT: DW_CFA_nop:
 //
 // DWARF64_ABS:      00000014 00000018 00000018 FDE cie=00000000 pc=00000000...00000000
-// DWARF64_PIC:      00000014 00000010 00000018 FDE cie=00000000 pc=00000000...00000000
+// DWARF64_PIC:      00000014 00000018 00000018 FDE cie=00000000 pc=0000001c...0000001c
+// DWARF64_OLD:      00000014 00000018 00000018 FDE cie=00000000 pc=00000000...00000000
 // DWARF64-NEXT:     Format:       DWARF32
 // DWARF64-NEXT:     DW_CFA_nop:
 // DWARF64-NEXT:     DW_CFA_nop:
-- 
2.43.0

