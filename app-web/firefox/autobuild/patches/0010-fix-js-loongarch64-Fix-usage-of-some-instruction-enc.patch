From 77beb665b0600233e7bd7972d72e2c4f4851dc7e Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Fri, 5 Apr 2024 22:58:15 +0800
Subject: [PATCH 10/10] fix(js): [loongarch64] Fix usage of some instruction
 encoding field masks

Ref: https://phabricator.services.mozilla.com/D203884
---
 js/src/jit/loong64/Assembler-loong64.cpp |  6 +++---
 js/src/jit/loong64/Assembler-loong64.h   | 11 ++++++++---
 2 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/js/src/jit/loong64/Assembler-loong64.cpp b/js/src/jit/loong64/Assembler-loong64.cpp
index 6c7a5f53da..07dac546c1 100644
--- a/js/src/jit/loong64/Assembler-loong64.cpp
+++ b/js/src/jit/loong64/Assembler-loong64.cpp
@@ -103,15 +103,15 @@ uint32_t js::jit::SA3(uint32_t value) {
 }
 
 Register js::jit::toRK(Instruction& i) {
-  return Register::FromCode((i.encode() & RKMask) >> RKShift);
+  return Register::FromCode(((i.encode() >> RKShift) & RKMask));
 }
 
 Register js::jit::toRJ(Instruction& i) {
-  return Register::FromCode((i.encode() & RJMask) >> RJShift);
+  return Register::FromCode(((i.encode() >> RJShift) & RJMask));
 }
 
 Register js::jit::toRD(Instruction& i) {
-  return Register::FromCode((i.encode() & RDMask) >> RDShift);
+  return Register::FromCode(((i.encode() >> RDShift) & RDMask));
 }
 
 Register js::jit::toR(Instruction& i) {
diff --git a/js/src/jit/loong64/Assembler-loong64.h b/js/src/jit/loong64/Assembler-loong64.h
index 4e0b8d6b66..a385d71f5f 100644
--- a/js/src/jit/loong64/Assembler-loong64.h
+++ b/js/src/jit/loong64/Assembler-loong64.h
@@ -309,6 +309,7 @@ static const uint32_t Imm26Shift = 0;
 static const uint32_t Imm26Bits = 26;
 static const uint32_t CODEShift = 0;
 static const uint32_t CODEBits = 15;
+static const uint32_t HINTBits = 5;
 
 // LoongArch instruction field bit masks.
 static const uint32_t RJMask = (1 << RJBits) - 1;
@@ -316,7 +317,9 @@ static const uint32_t RKMask = (1 << RKBits) - 1;
 static const uint32_t RDMask = (1 << RDBits) - 1;
 static const uint32_t SA2Mask = (1 << SA2Bits) - 1;
 static const uint32_t SA3Mask = (1 << SA3Bits) - 1;
+static const uint32_t CDMask = (1 << CDBits) - 1;
 static const uint32_t CONDMask = (1 << CONDBits) - 1;
+static const uint32_t HINTMask = (1 << HINTBits) - 1;
 static const uint32_t LSBWMask = (1 << LSBWBits) - 1;
 static const uint32_t LSBDMask = (1 << LSBDBits) - 1;
 static const uint32_t MSBWMask = (1 << MSBWBits) - 1;
@@ -1611,7 +1614,7 @@ class InstReg : public Instruction {
   InstReg(OpcodeField op, int32_t cond, FloatRegister fk, FloatRegister fj,
           AssemblerLOONG64::FPConditionBit cd)
       : Instruction(op | (cond & CONDMask) << CONDShift | FK(fk) | FJ(fj) |
-                    (cd & RDMask)) {
+                    (cd & CDMask)) {
     MOZ_ASSERT(is_uintN(cond, 5));
   }
 
@@ -1700,7 +1703,7 @@ class InstImm : public Instruction {
   }
   InstImm(OpcodeField op, int32_t si12, Register rj, int32_t hint)
       : Instruction(op | (si12 & Imm12Mask) << Imm12Shift | RJ(rj) |
-                    (hint & RDMask)) {
+                    (hint & HINTMask)) {
     MOZ_ASSERT(op == op_preld);
   }
   InstImm(OpcodeField op, int32_t msb, int32_t lsb, Register rj, Register rd,
@@ -1738,7 +1741,9 @@ class InstImm : public Instruction {
   uint32_t extractRJ() {
     return extractBitField(RJShift + RJBits - 1, RJShift);
   }
-  void setRJ(uint32_t rj) { data = (data & ~RJMask) | (rj << RJShift); }
+  void setRJ(uint32_t rj) {
+    data = (data & ~(RJMask << RJShift)) | (rj << RJShift);
+  }
   uint32_t extractRD() {
     return extractBitField(RDShift + RDBits - 1, RDShift);
   }
-- 
2.44.0

